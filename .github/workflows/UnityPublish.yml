name: Unity Publish

on:
  workflow_dispatch:
    inputs:
      unity_username:
        description: 'Unity Publishing Username'
        required: true
      unity_password:
        description: 'Unity Publishing Password'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Mask sensitive inputs securely
        run: |
          UNITY_USERNAME=$(jq -r '.inputs.unity_username' $GITHUB_EVENT_PATH)
          UNITY_PASSWORD=$(jq -r '.inputs.unity_password' $GITHUB_EVENT_PATH)
          echo "::add-mask::$UNITY_USERNAME"
          echo "::add-mask::$UNITY_PASSWORD"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
  
      - name: Install dotnet-script
        run: |
          dotnet tool install -g dotnet-script
          dotnet script --version

      - name: Get Latest Release
        id: get_release
        uses: actions/github-script@v6
        with:
          script: |
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const packageAsset = latestRelease.data.assets.find(asset => asset.name.endsWith('.unitypackage'));
            if (!packageAsset) {
              throw new Error('No .unitypackage asset found in the latest release.');
            }
            
            const version = latestRelease.data.tag_name.replace(/^v/, '');
            
            // Set individual outputs
            core.setOutput('url', packageAsset.browser_download_url);
            core.setOutput('name', packageAsset.name);
            core.setOutput('version', version);

      - name: Download Unity Package
        run: |
          curl -L -o "${{ steps.get_release.outputs.name }}" "${{ steps.get_release.outputs.url }}"

      - name: Run UnityPublish.csx
        env:
          UNITY_USERNAME: ${{ github.event.inputs.unity_username }}
          UNITY_PASSWORD: ${{ github.event.inputs.unity_password }}
          PACKAGE_PATH: ${{ steps.get_release.outputs.name }}
          PUBLISH_LICENSE_HASH: ${{ secrets.PUBLISH_LICENSE_HASH }}
          PUBLISH_HARDWARE_HASH: ${{ secrets.PUBLISH_HARDWARE_HASH }}
          RELEASE_VERSION: ${{ steps.get_release.outputs.version }}
        run: |
          dotnet script .github/UnityPublish.csx
